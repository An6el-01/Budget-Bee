import * as React from 'react';
import { View, Text, StyleSheet, Button, ScrollView } from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import joblib from 'joblib'; // Make sure to properly set this up to work with React Native
import { fetchTransactionData } from '../ai_model/savings_recommendation/fetch_data';
import { load_and_preprocess_data } from '../ai_model/savings_recommendation/data_processing';

const colors = {
  primary: "#FCB900",
  text: "#212121",
  background: "#F5F5F5",
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: colors.background,
    padding: 20,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 20,
  },
  headerText: {
    fontSize: 24,
    fontWeight: 'bold',
    color: colors.text,
    marginLeft: 10,
  },
  recommendation: {
    backgroundColor: colors.primary,
    padding: 15,
    borderRadius: 10,
    marginBottom: 15,
  },
  recommendationText: {
    color: '#fff',
    fontSize: 16,
  },
  closeButton: {
    marginTop: 20,
  },
});

const SavingsRecommendations = ({ onClose }) => {
  const [recommendations, setRecommendations] = React.useState([]);

  React.useEffect(() => {
    const generateRecommendations = async () => {
      // Load the trained model
      const model = joblib.load('savings_recommendation_model.pkl');
      
      // Fetch and preprocess the data
      const transactions = await fetchTransactionData('path_to_your_database');
      const [X, y] = load_and_preprocess_data(transactions);
      
      // Predict the recommendations
      const predictions = model.predict(X);
      
      // Mock recommendations based on predictions
      const generatedRecommendations = predictions.map((prediction, index) => {
        if (prediction === 'Low Savings') {
          return `You could save more by reducing expenses in ${X[index]['category_name']}!`;
        } else {
          return `You're doing great with your savings! Keep it up!`;
        }
      });

      setRecommendations(generatedRecommendations);
    };

    generateRecommendations();
  }, []);

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Ionicons name="md-wand" size={32} color={colors.primary} />
        <Text style={styles.headerText}>Savings Recommendations</Text>
      </View>
      <ScrollView>
        {recommendations.map((recommendation, index) => (
          <View key={index} style={styles.recommendation}>
            <Text style={styles.recommendationText}>{recommendation}</Text>
          </View>
        ))}
      </ScrollView>
      <View style={styles.closeButton}>
        <Button title="Close" onPress={onClose} />
      </View>
    </View>
  );
};

export default SavingsRecommendations;
